#!/usr/bin/awk -f

BEGIN{
  cmd = "pdbswitch" ;
  if (ARGV[1] !~ /^(0|1)/)
    error("First argument must be 1 (tautomers) or 0 (no tautomers)") ;
  taut    = ARGV[1] ;
  mcrpout = ARGV[2] ;
  pdbfile = ARGV[3] ;
  define_states() ;
  nsites = 0 ;
  while (getline < mcrpout)
  {
    if ($0 ~ /^>/ && $2 !~/(NT|CT)/)
    {
      numb[$3] = substr($2,index($2,"-")+1) ;
#     type[numb[$3]] = substr($2,1,3) ;
      type[numb[$3]] = substr($2,1,2) ; # changed to work with  PA and PD, SC 20-12-2011
      if(taut == 0 && type[numb[$3]] == "HIS")
	error("HIS not supported in non-tautomer mode.") ;
    }
    if ($0 ~ /^f/)
    {
      for (i = 2 ; i <= NF ; i++)
	if (type[numb[i-2]] != "") state[numb[i-2]] = $i ;
    }
  }
  while (getline < pdbfile)
  {
      # $5 substituted by i=substr($0,23,4)#SC 15-11-2011
      i=substr($0,23,4)*1 ; #SC 15-11-2011
      if (type[i] != "") #SC 15-11-2011
	  print substr($0,1,17) s[type[i],state[i]] substr($0,22) ; #SC 15-11-2011
      else print $0 ;
  }
}


function define_states()#copied from groswitch, SC 20-12-2011
{
  if (taut)
  {
    # Set of states to use when *only* HIS has tautomers (ie, petit use):
    #s["AS",0] = "AS0 " ;  s["AS",1] = "AS1 " ;  s["AS",2] = "AS2 " ;  s["AS",3] = "AS3 " ;  s["AS",4] = "AS4 " ; #res ASP
    s["AR",0] = "AR0 " ;  s["AR",1] = "AR1 " ; #res ARN
    s["GR",0] = "GR0 " ;  s["GR",1] = "GR1 " ;  s["GR",2] = "GR2 " ; #res GRN
    s["CR",0] = "CR0 " ;  s["CR",1] = "CR1 " ; #res CRN
    s["UR",0] = "UR0 " ;  s["UR",1] = "UR1 " ; #res URN
  }
  else
 {
    # Set of states to use without tautomers (ie, mcrp use):
    s["AR",0] = "AR0 " ;  s["AR",1] = "AR1 " ; 
    s["GR",0] = "GR0 " ;  s["GR",1] = "GR1 " ;  
    s["CR",0] = "CR0 " ;  s["CR",1] = "CR1 " ; 
    s["UR",0] = "UR0 " ;  s["UR",1] = "UR1 " ;  
#    s["AS",0] = "AS0 " ;  s["AS",1] = "AS1 " ;
#    s["PA",0] = "PA0 " ;  s["PA",1] = "PA1 " ;
#    s["PD",0] = "PD0 " ;  s["PD",1] = "PD1 " ;
#    s["HE",0] = "HMCR" ;  s["HE",1] = "HMCO" ;
  }
}

function warning(msg)
{
  print cmd ": Warning: " msg | "cat 1>&2" ;
}

function error(msg)
{
  print cmd ": Error: " msg | "cat 1>&2" ;
  exit 1 ;
}

